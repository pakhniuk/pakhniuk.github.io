{"version":3,"sources":["webpack:///./src/js/Ball.js","webpack:///./src/js/Balls.js","webpack:///./src/js/App.js","webpack:///./src/js/Mouse.js","webpack:///./src/index.js"],"names":["x","y","radius","color","this","originalX","originalY","vx","vy","mouseRadius","friction","springFactor","Ball","mousePos","angle","tx","ty","dx","dy","Math","sqrt","pow","atan2","cos","sin","dx1","dy1","ctx","save","beginPath","arc","PI","fillStyle","fill","closePath","restore","balls","Balls","amount","i","push","random","setBalls","moveTo","forEach","ball","lineTo","stroke","length","p0","p1","quadraticCurveTo","canvas","document","getElementById","getContext","rect","getBoundingClientRect","onmousemove","e","clientX","left","clientY","top","mouseBall","circleBalls","getDotsByCircle","render","window","requestAnimationFrame","clearRect","setPosition","draw","think","connectFillCircleDots","require"],"mappings":"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","file":"js/main.bundle.js","sourcesContent":["export default class Ball {\n  constructor(x = 0, y = 0, radius = 2, color = \"#ff6600\") {\n    this.x = x;\n    this.y = y;\n    this.originalX = x;\n    this.originalY = y;\n    this.vx = 0;\n    this.vy = 0;\n    this.radius = radius;\n    this.color = color;\n    this.mouseRadius = 30;\n    this.friction = 0.7;\n    this.springFactor = -0.01;\n  }\n\n  setPosition(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  think(mousePos) {\n    // distance between dot and mouse\n    let dx = this.x - mousePos.x;\n    let dy = this.y - mousePos.y;\n\n    let dist = Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));\n\n    // friction\n    if (dist < this.mouseRadius) {\n      let angle = Math.atan2(dy, dx);\n\n      // distance between dot and dot on circle with mouse center and radius 30\n      let tx = mousePos.x + Math.cos(angle) * this.mouseRadius;\n      let ty = mousePos.y + Math.sin(angle) * this.mouseRadius;\n\n      this.vx += tx - this.x;\n      this.vy += ty - this.y;\n    }\n\n    // spring back\n    // distance between original position dot and current position\n    const dx1 = this.x - this.originalX;\n    const dy1 = this.y - this.originalY;\n\n    this.vx += dx1 * this.springFactor;\n    this.vy += dy1 * this.springFactor;\n\n    // friction\n    this.vx *= this.friction;\n    this.vy *= this.friction;\n\n    // actual move\n    this.x += this.vx;\n    this.y += this.vy;\n  }\n\n  draw(ctx) {\n    ctx.save();\n    ctx.beginPath();\n    ctx.arc(this.x, this.y, this.radius, 0, 2 * Math.PI);\n    ctx.fillStyle = this.color;\n    ctx.fill();\n    ctx.closePath();\n    ctx.restore();\n  }\n}\n","import Ball from \"./Ball\";\n\nexport default class Balls {\n  constructor() {\n    this.balls = [];\n  }\n\n  setBalls(balls) {\n    this.balls = balls;\n  }\n\n  getBalls() {\n    return this.balls;\n  }\n  getRandomDots(amount) {\n    const balls = [];\n    for (let i = 0; i < amount; i++) {\n      balls.push(new Ball(Math.random() * 600, Math.random() * 600));\n    }\n\n    this.setBalls(balls);\n\n    return balls;\n  }\n\n  getDotsByCircle(x, y, radius, amount) {\n    const balls = [];\n    for (let i = 0; i < amount; i++) {\n      balls.push(\n        new Ball(\n          x + radius * Math.cos((i * 2 * Math.PI) / amount),\n          y + radius * Math.sin((i * 2 * Math.PI) / amount)\n        )\n      );\n    }\n\n    this.setBalls(balls);\n\n    return balls;\n  }\n\n  connectCircleDots(ctx) {\n    ctx.beginPath();\n    ctx.moveTo(this.balls[0].x, this.balls[0].y);\n    this.balls.forEach(ball => ctx.lineTo(ball.x, ball.y));\n    ctx.closePath();\n    ctx.stroke();\n  }\n\n  connectFillCircleDots(ctx) {\n    const amount = this.balls.length;\n    ctx.beginPath();\n    for (let i = 0; i <= amount; ++i) {\n      const p0 = this.balls[i >= amount ? i - amount : i];\n      const p1 = this.balls[i + 1 >= amount ? i + 1 - amount : i + 1];\n      ctx.quadraticCurveTo(\n        p0.x,\n        p0.y,\n        (p0.x + p1.x) * 0.5,\n        (p0.y + p1.y) * 0.5\n      );\n    }\n    ctx.closePath();\n    ctx.fill();\n  }\n}\n","import Mouse from \"./Mouse\";\nimport Ball from \"./Ball\";\nimport Balls from \"./Balls\";\n\nconst canvas = document.getElementById(\"jellyAnimation\");\nconst ctx = canvas.getContext(\"2d\");\nconst mousePos = new Mouse(canvas);\nconst mouseBall = new Ball(mousePos.x, mousePos.y, 30, \"green\");\nconst balls = new Balls();\nconst circleBalls = balls.getDotsByCircle(200, 200, 100, 10);\n\nconst render = () => {\n  window.requestAnimationFrame(render);\n  ctx.clearRect(0, 0, 600, 600);\n  mouseBall.setPosition(mousePos.x, mousePos.y);\n  mouseBall.draw(ctx);\n  circleBalls.forEach(ball => {\n    ball.think(mousePos);\n    // ball.draw(ctx);\n  });\n  balls.connectFillCircleDots(ctx);\n};\n\nrender();\n","export default class Mouse {\n  constructor(canvas) {\n    this.x = 0;\n    this.y = 0;\n    const rect = canvas.getBoundingClientRect();\n\n    canvas.onmousemove = e => {\n      this.x = e.clientX - rect.left;\n      this.y = e.clientY - rect.top;\n    };\n  }\n}\n","// styles\nrequire(\"Styles\");\n\n// scripts\nrequire(\"App\");\n"],"sourceRoot":""}